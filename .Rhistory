u <-
(exp(-(t_i / B[i, 2]) ^ B[i, 1]) - exp(-(as.numeric(Tb[i]) / B[i, 2]) ^
B[i, 1])) / (exp(-(t_i / B[i, 2]) ^ B[i, 1]))
U <- rbind(U, c(u))
}
Ub <- U[2:num + 1,]
Ub_sd <- sd(Ub)
me <- qt(.95, 9) * sd(Ub) / sqrt(num)
u_l <- mean(Ub) - me
u_u <- mean(Ub) + me
fn_l <- function(tx) {
return(u_l -  (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
T_l <- nleqslv(100, fn_l)$x
fn_u <- function(tx) {
return(u_u -  (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
T_u <- nleqslv(100, fn_u)$x
interval <- rbind(interval, c(T_l, T_u))
}
interval_pred <- interval[1:num+1,]
View(interval_pred)
x <- matrix(ncol = 2)
num <- 15
for (val in 1:num)
{
z <- rgamma(n = 17860, shape = 1, scale = 1)
logLikFun <- function(param) {
beta <- param[1]
ita <- param[2]
c <- status[1:17860]
v <- trunc[1:17860]
t <- time[1:17860]
tL <- time_lt[1:17860]
#f = (beta/ita)*((t/ita)^(beta-1))*exp((-t/ita)^beta)
f = log(beta / ita) + (beta - 1) * log(t / ita) - (t / ita) ^ beta
#fu = 1-exp((-t/ita)^beta)
fu = (t / ita) ^ beta
#fuL = 1-exp((-tL/ita)^beta)
fuL = (tL / ita) ^ beta
sum(z * (
c * v * f + c * (1 - v) * (f + fuL) + (1 - c) * v * (-fu) + (1 - c) * (1 -
v) * (fuL - fu)
))
}
mle_b <-
maxLik(logLik = logLikFun, start = c(beta = 2, ita = 100))
#summary(mle_b)
shape_lt_b <- mle_b$estimate[1]
scale_lt_b <- mle_b$estimate[2]
x <- rbind(x, c(shape_lt_b, scale_lt_b))
}
B <- x[1:num + 1, ]
library(nleqslv)
interval <- matrix(ncol = 2)
for (sample in 1:10) {
f <- runif(num)
Tb <- list()
U <- matrix()
t_i <- time[sample]
for (prob in f) {
fn <- function(tx) {
return(prob - (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
Tb <- rbind(Tb, nleqslv(100, fn)$x)
}
for (i in 1:num) {
u <-
(exp(-(t_i / B[i, 2]) ^ B[i, 1]) - exp(-(as.numeric(Tb[i]) / B[i, 2]) ^
B[i, 1])) / (exp(-(t_i / B[i, 2]) ^ B[i, 1]))
U <- rbind(U, c(u))
}
Ub <- U[2:num + 1,]
Ub_sd <- sd(Ub)
me <- qt(.95, 9) * sd(Ub) / sqrt(num)
u_l <- mean(Ub) - me
u_u <- mean(Ub) + me
fn_l <- function(tx) {
return(u_l -  (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
T_l <- nleqslv(100, fn_l)$x
fn_u <- function(tx) {
return(u_u -  (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
T_u <- nleqslv(100, fn_u)$x
interval <- rbind(interval, c(T_l, T_u))
}
interval_pred <- interval[1:num+1,]
View(interval_pred)
View(interval)
interval_pred <- interval[1:num+1,]
for (sample in 1:10) {
f <- runif(num)
Tb <- list()
U <- matrix()
t_i <- time[sample]
for (prob in f) {
fn <- function(tx) {
return(prob - (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
Tb <- rbind(Tb, nleqslv(100, fn)$x)
}
for (i in 1:num) {
u <-
(exp(-(t_i / B[i, 2]) ^ B[i, 1]) - exp(-(as.numeric(Tb[i]) / B[i, 2]) ^
B[i, 1])) / (exp(-(t_i / B[i, 2]) ^ B[i, 1]))
U <- rbind(U, c(u))
}
Ub <- U[2:num + 1,]
Ub_sd <- sd(Ub)
me <- qt(.95, 9) * sd(Ub) / sqrt(num)
u_l <- mean(Ub) - me
u_u <- mean(Ub) + me
fn_l <- function(tx) {
return(u_l -  (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
T_l <- nleqslv(100, fn_l)$x
fn_u <- function(tx) {
return(u_u -  (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
T_u <- nleqslv(100, fn_u)$x
interval <- rbind(interval, c(T_l, T_u))
}
library(nleqslv)
nsample <- 10
interval <- matrix(ncol = 2)
for (sample in 1:10) {
f <- runif(num)
Tb <- list()
U <- matrix()
t_i <- time[sample]
for (prob in f) {
fn <- function(tx) {
return(prob - (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
Tb <- rbind(Tb, nleqslv(100, fn)$x)
}
for (i in 1:num) {
u <-
(exp(-(t_i / B[i, 2]) ^ B[i, 1]) - exp(-(as.numeric(Tb[i]) / B[i, 2]) ^
B[i, 1])) / (exp(-(t_i / B[i, 2]) ^ B[i, 1]))
U <- rbind(U, c(u))
}
Ub <- U[2:num + 1,]
Ub_sd <- sd(Ub)
me <- qt(.95, 9) * sd(Ub) / sqrt(num)
u_l <- mean(Ub) - me
u_u <- mean(Ub) + me
fn_l <- function(tx) {
return(u_l -  (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
T_l <- nleqslv(100, fn_l)$x
fn_u <- function(tx) {
return(u_u -  (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
T_u <- nleqslv(100, fn_u)$x
interval <- rbind(interval, c(T_l, T_u))
}
interval_pred <- interval[1:nsample+1,]
View(interval_pred)
library(nleqslv)
nsample <- 20
interval <- matrix(ncol = 2)
for (sample in 1:10) {
f <- runif(num)
Tb <- list()
U <- matrix()
t_i <- time[sample]
for (prob in f) {
fn <- function(tx) {
return(prob - (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
Tb <- rbind(Tb, nleqslv(100, fn)$x)
}
for (i in 1:num) {
u <-
(exp(-(t_i / B[i, 2]) ^ B[i, 1]) - exp(-(as.numeric(Tb[i]) / B[i, 2]) ^
B[i, 1])) / (exp(-(t_i / B[i, 2]) ^ B[i, 1]))
U <- rbind(U, c(u))
}
Ub <- U[2:num + 1,]
Ub_sd <- sd(Ub)
me <- qt(.95, 9) * sd(Ub) / sqrt(num)
u_l <- mean(Ub) - me
u_u <- mean(Ub) + me
fn_l <- function(tx) {
return(u_l -  (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
T_l <- nleqslv(100, fn_l)$x
fn_u <- function(tx) {
return(u_u -  (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
T_u <- nleqslv(100, fn_u)$x
interval <- rbind(interval, c(T_l, T_u))
}
interval_pred <- interval[1:nsample+1,]
for (sample in 1:10) {
f <- runif(num)
Tb <- list()
U <- matrix()
t_i <- time[sample]
for (prob in f) {
fn <- function(tx) {
return(prob - (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
Tb <- rbind(Tb, nleqslv(100, fn)$x)
}
for (i in 1:num) {
u <-
(exp(-(t_i / B[i, 2]) ^ B[i, 1]) - exp(-(as.numeric(Tb[i]) / B[i, 2]) ^
B[i, 1])) / (exp(-(t_i / B[i, 2]) ^ B[i, 1]))
U <- rbind(U, c(u))
}
Ub <- U[2:num + 1,]
Ub_sd <- sd(Ub)
me <- qt(.95, 9) * sd(Ub) / sqrt(num)
u_l <- mean(Ub) - me
u_u <- mean(Ub) + me
fn_l <- function(tx) {
return(u_l -  (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
T_l <- nleqslv(100, fn_l)$x
fn_u <- function(tx) {
return(u_u -  (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
T_u <- nleqslv(100, fn_u)$x
interval <- rbind(interval, c(T_l, T_u))
}
interval_pred <- interval[1:nsample+1,]
View(interval_pred)
library(readxl)
data_set_raw <- read_excel("master_data.xlsx", sheet = "master")
data_set <- data_set_raw[which(data_set_raw$clear == 0),]
manuf <- as.factor(data.matrix(data_set[, "manuf"]))
time <- data.matrix(data_set[, "time"])
time_lt <- data.matrix(data_set[, "time_lt"])
status <- data.matrix(data_set[, "status"])
trunc <- data.matrix(data_set[, "trunc"])
library(survival)
library(ggplot2)
library(survminer)
library(Metrics)
library(maxLik)
logLikFun <- function(param) {
beta <- param[1]
ita <- param[2]
c <- status[1:17000]
v <- trunc[1:17000]
t <- time[1:17000]
tL <- time_lt[1:17000]
#f = (beta/ita)*((t/ita)^(beta-1))*exp((-t/ita)^beta)
f = log(beta / ita) + (beta - 1) * log(t / ita) - (t / ita) ^ beta
#fu = 1-exp((-t/ita)^beta)
fu = (t / ita) ^ beta
#fuL = 1-exp((-tL/ita)^beta)
fuL = (tL / ita) ^ beta
sum(c * v * f + c * (1 - v) * (f + fuL) + (1 - c) * v * (-fu) + (1 - c) *
(1 - v) * (fuL - fu))
}
mle <- maxLik(logLik = logLikFun, start = c(beta = 2, ita = 100))
summary(mle)
shape_lt <- mle$estimate[1]
scale_lt <- mle$estimate[2]
#####---------------------------------------------------------------------------
# MLE without left truncation considered
logLikFun <- function(param) {
beta <- param[1]
ita <- param[2]
c <- status[1:17000]
#v <- trunc
t <- time[1:17000]
#tL <- time_lt
#f = (beta/ita)*((t/ita)^(beta-1))*exp((-t/ita)^beta)
f = log(beta / ita) + (beta - 1) * log(t / ita) - (t / ita) ^ beta
#fu = 1-exp((-t/ita)^beta)
fu = (t / ita) ^ beta
#fuL = 1-exp((-tL/ita)^beta)
#fuL = (tL/ita)^beta
sum(c * f + (1 - c) * (-fu))
}
mle <- maxLik(logLik = logLikFun, start = c(beta = 2, ita = 100))
summary(mle)
shape_no_lt <- mle$estimate[1]
scale_no_lt <- mle$estimate[2]
#####---------------------------------------------------------------------------
# Plotting Weibull Distributions:
x_lower_wei <- 0
x_upper_wei <- 50
# Excluded ylimits this time.
ggplot(data.frame(x = c(x_lower_wei , x_upper_wei)), aes(x = x)) +
xlim(c(x_lower_wei , x_upper_wei)) +
stat_function(
fun = dweibull,
args = list(shape = shape_lt, scale = scale_lt),
aes(colour = "with")
) +
stat_function(
fun = dweibull,
args = list(shape = shape_no_lt, scale = scale_no_lt),
aes(colour = "without")
) +
#stat_function(fun = dweibull, args = list(shape = 3, scale = 4), aes(colour = "3 & 4")) +
scale_color_manual("Legend", values = c("blue", "green")) +
labs(x = "\n Time", y = "f(x) \n",
title = "Weibull Probability Density Function") +
theme(
plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(
face = "bold",
colour = "black",
size = 12
),
axis.title.y = element_text(
face = "bold",
colour = "black",
size = 12
),
legend.title = element_text(face = "bold", size = 10),
legend.position = "right"
)
x <- matrix(ncol = 2)
num <- 15
for (val in 1:num)
{
z <- rgamma(n = 17860, shape = 1, scale = 1)
logLikFun <- function(param) {
beta <- param[1]
ita <- param[2]
c <- status[1:17860]
v <- trunc[1:17860]
t <- time[1:17860]
tL <- time_lt[1:17860]
#f = (beta/ita)*((t/ita)^(beta-1))*exp((-t/ita)^beta)
f = log(beta / ita) + (beta - 1) * log(t / ita) - (t / ita) ^ beta
#fu = 1-exp((-t/ita)^beta)
fu = (t / ita) ^ beta
#fuL = 1-exp((-tL/ita)^beta)
fuL = (tL / ita) ^ beta
sum(z * (
c * v * f + c * (1 - v) * (f + fuL) + (1 - c) * v * (-fu) + (1 - c) * (1 -
v) * (fuL - fu)
))
}
mle_b <-
maxLik(logLik = logLikFun, start = c(beta = 2, ita = 100))
#summary(mle_b)
shape_lt_b <- mle_b$estimate[1]
scale_lt_b <- mle_b$estimate[2]
x <- rbind(x, c(shape_lt_b, scale_lt_b))
}
B <- x[1:num + 1, ]
library(nleqslv)
nsample <- 20
interval <- matrix(ncol = 2)
for (sample in 1:10) {
f <- runif(num)
Tb <- list()
U <- matrix()
t_i <- time[sample]
for (prob in f) {
fn <- function(tx) {
return(prob - (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
Tb <- rbind(Tb, nleqslv(100, fn)$x)
}
for (i in 1:num) {
u <-
(exp(-(t_i / B[i, 2]) ^ B[i, 1]) - exp(-(as.numeric(Tb[i]) / B[i, 2]) ^
B[i, 1])) / (exp(-(t_i / B[i, 2]) ^ B[i, 1]))
U <- rbind(U, c(u))
}
Ub <- U[2:num + 1,]
Ub_sd <- sd(Ub)
me <- qt(.95, 9) * sd(Ub) / sqrt(num)
u_l <- mean(Ub) - me
u_u <- mean(Ub) + me
fn_l <- function(tx) {
return(u_l -  (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
T_l <- nleqslv(100, fn_l)$x
fn_u <- function(tx) {
return(u_u -  (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
T_u <- nleqslv(100, fn_u)$x
interval <- rbind(interval, c(T_l, T_u))
}
interval_pred <- interval[1:nsample+1,]
library(nleqslv)
nsample <- 20
interval <- matrix(ncol = 2)
for (sample in 1:nsample) {
f <- runif(num)
Tb <- list()
U <- matrix()
t_i <- time[sample]
for (prob in f) {
fn <- function(tx) {
return(prob - (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
Tb <- rbind(Tb, nleqslv(100, fn)$x)
}
for (i in 1:num) {
u <-
(exp(-(t_i / B[i, 2]) ^ B[i, 1]) - exp(-(as.numeric(Tb[i]) / B[i, 2]) ^
B[i, 1])) / (exp(-(t_i / B[i, 2]) ^ B[i, 1]))
U <- rbind(U, c(u))
}
Ub <- U[2:num + 1,]
Ub_sd <- sd(Ub)
me <- qt(.95, 9) * sd(Ub) / sqrt(num)
u_l <- mean(Ub) - me
u_u <- mean(Ub) + me
fn_l <- function(tx) {
return(u_l -  (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
T_l <- nleqslv(100, fn_l)$x
fn_u <- function(tx) {
return(u_u -  (exp(-(t_i / scale_lt) ^ shape_lt) - exp(-(tx / scale_lt) ^
shape_lt)) / (exp(-(t_i / scale_lt) ^ shape_lt)))
}
T_u <- nleqslv(100, fn_u)$x
interval <- rbind(interval, c(T_l, T_u))
}
interval_pred <- interval[1:nsample+1,]
View(interval_pred)
results <- cbind(time[1:nsample], interval_pred)
View(results)
library(readxl)
data_set_raw <- read_excel("master_data.xlsx", sheet = "master")
data_set <- data_set_raw[which(data_set_raw$clear == 0),]
manuf <- as.factor(data.matrix(data_set[, "manuf"]))
time <- data.matrix(data_set[, "time"])
time_lt <- data.matrix(data_set[, "time_lt"])
status <- data.matrix(data_set[, "status"])
trunc <- data.matrix(data_set[, "trunc"])
library(survival)
library(ggplot2)
library(survminer)
library(Metrics)
library(maxLik)
logLikFun <- function(param) {
beta <- param[1]
ita <- param[2]
c <- status[1:17000]
v <- trunc[1:17000]
t <- time[1:17000]
tL <- time_lt[1:17000]
#f = (beta/ita)*((t/ita)^(beta-1))*exp((-t/ita)^beta)
f = log(beta / ita) + (beta - 1) * log(t / ita) - (t / ita) ^ beta
#fu = 1-exp((-t/ita)^beta)
fu = (t / ita) ^ beta
#fuL = 1-exp((-tL/ita)^beta)
fuL = (tL / ita) ^ beta
sum(c * v * f + c * (1 - v) * (f + fuL) + (1 - c) * v * (-fu) + (1 - c) *
(1 - v) * (fuL - fu))
}
mle <- maxLik(logLik = logLikFun, start = c(beta = 2, ita = 100))
summary(mle)
shape_lt <- mle$estimate[1]
scale_lt <- mle$estimate[2]
x <- matrix(ncol = 2)
num <- 1000
for (val in 1:num)
{
z <- rgamma(n = 17860, shape = 1, scale = 1)
logLikFun <- function(param) {
beta <- param[1]
ita <- param[2]
c <- status[1:17860]
v <- trunc[1:17860]
t <- time[1:17860]
tL <- time_lt[1:17860]
#f = (beta/ita)*((t/ita)^(beta-1))*exp((-t/ita)^beta)
f = log(beta / ita) + (beta - 1) * log(t / ita) - (t / ita) ^ beta
#fu = 1-exp((-t/ita)^beta)
fu = (t / ita) ^ beta
#fuL = 1-exp((-tL/ita)^beta)
fuL = (tL / ita) ^ beta
sum(z * (
c * v * f + c * (1 - v) * (f + fuL) + (1 - c) * v * (-fu) + (1 - c) * (1 -
v) * (fuL - fu)
))
}
mle_b <-
maxLik(logLik = logLikFun, start = c(beta = 2, ita = 100))
#summary(mle_b)
shape_lt_b <- mle_b$estimate[1]
scale_lt_b <- mle_b$estimate[2]
x <- rbind(x, c(shape_lt_b, scale_lt_b))
}
